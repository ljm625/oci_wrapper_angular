/**
 * OCI Wrapper API
 * Make it possible to query, modify and delete rules and rulegroups
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';
import * as globals from '../../../config.global'

/* tslint:disable:no-unused-variable member-ordering */

'use strict';
import {CookieService} from "angular2-cookie/services/cookies.service";

@Injectable()
export class AddApi {

    protected basePath = globals.OCI_URL+'/api/v1';
    public defaultHeaders : Headers = new Headers({
        'Content-Type': 'application/json',
        Accept: 'application/json'
    });

    constructor(protected http: Http, @Optional() basePath: string,private cookie:CookieService) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    headerParser(header:Headers){
        if (header.get('Authorization')!=undefined){
            header.set('Authorization',"Basic " + this.cookie.get('oci_session'));
            return header
        }
        else {
            header.append('Authorization',"Basic " + this.cookie.get('oci_session'));
            return header;
        }
    }

    /**
     * add a DataSources.
     * The API offer the ability to add the datasource
     * @param body the name.
     */
    public datasourcePut (body: models.DataSource, extraHttpRequestParams?: any ) : Observable<Array<models.DataSource>> {
        const path = this.basePath + '/datasource';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasourcePut.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * add a RuleGroup.
     * The API offer the ability to add the RuleGroup
     * @param body the name.
     */
    public rulegroupPut (body: models.RuleGroup, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/rulegroup';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling rulegroupPut.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * add a RuleSet.
     * The API offer the ability to add the RuleSet
     * @param body the name.
     */
    public rulesetPut (body: models.RuleSet, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/ruleset';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling rulesetPut.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * add a ThresholdDef.
     * The API offer the ability to add the ThresholdDef
     * @param body the name.
     */
    public thresholdDefPut (body: models.ThresholdDef, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/threshold_def';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling thresholdDefPut.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * add a Threshold.
     * The API offer the ability to add the Threshold
     * @param body the name.
     */
    public thresholdPut (body: models.Threshold, extraHttpRequestParams?: any ) : Observable<{}> {
        const path = this.basePath + '/threshold';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling thresholdPut.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
