/**
 * OCI Wrapper API
 * Make it possible to query, modify and delete rules and rulegroups
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';
import * as globals from '../../../config.global'

/* tslint:disable:no-unused-variable member-ordering */

'use strict';
import {CookieService} from "angular2-cookie/services/cookies.service";

@Injectable()
export class QueryApi {
    protected basePath = globals.OCI_URL+'/api/v1';
    public defaultHeaders : Headers = new Headers({
        'Content-Type': 'application/json',
        Accept: 'application/json'
    });

    constructor(protected http: Http, @Optional() basePath: string,private cookie:CookieService) {
        if (basePath) {
            this.basePath = basePath;
        }
    }


    /**
     *
     */
    public login(username:string,password:string,extraHttpRequestParams?: any) {
        const path = this.basePath + '/login';
        let queryParameters = new URLSearchParams();
        let headerParams = new Headers({
            'Content-Type': 'application/json',
            Accept: 'application/json'
        });
        headerParams.append("Authorization", "Basic " + btoa(username + ":" + password));
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                console.log(response.status);
                if (response.status === 204) {
                    return undefined;
                } else if(response.status === 401) {
                    return 401;
                }else {
                    return response.json();
                }
            }).catch(err=>{
                if (err.status===401){
                    console.log('Unauthorized');
                    return Observable.throw('Unauthorized');
                }
            });

    }

    headerParser(header:Headers){
        if (header.get('Authorization')!=undefined){
            header.set('Authorization',"Basic " + this.cookie.get('oci_session'));
            return header
        }
        else {
            header.append('Authorization',"Basic " + this.cookie.get('oci_session'))
            return header
        }
    }

    /**
     * Get all the defined DataSources.
     * The API offer the ability to get the datasource and check the detail of it.
     */
    public datasourceGet (extraHttpRequestParams?: any ) : Observable<Array<models.DataSource>> {
        const path = this.basePath + '/datasource';
        console.log(path);
        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map((response: Response) => {
            console.log(response.status);
                console.log(response.json());
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
        * Get all the defined DataCenters.
        * The API offer the ability to get the datasource and check the detail of it.
        */
    public datacenterGet(extraHttpRequestParams?: any): Observable<Array<string>> {
        const path = this.basePath + '/query/datacenter';
        console.log(path);
        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };
        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                console.log(response.status);
                console.log(response.json());
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }



    /**
     * Get a datasource
     * a detailed datasource
     * @param id the id for the datasource.
     */
    public datasourceIdGet (id: number, extraHttpRequestParams?: any ) : Observable<models.DataSource> {
        const path = this.basePath + '/datasource/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling datasourceIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get all RuleGroup Report
     * a detailed RuleGroup
     */
    public reportGet (extraHttpRequestParams?: any ) : Observable<models.Report> {
        const path = this.basePath + '/report';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * A certain RuleGroup report.
     * get a certain report
     * @param body the RuleGroup Name.
     */
    public reportPost (body: models.Report, extraHttpRequestParams?: any ) : Observable<models.Report> {
        const path = this.basePath + '/report';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling reportPost.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get all the defined RuleGroup.
     * The API offer the ability to get the RuleGroup and check the detail of it.
     */
    public rulegroupGet (extraHttpRequestParams?: any ) : Observable<Array<models.RuleGroup>> {
        const path = this.basePath + '/rulegroup';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a RuleGroup
     * a detailed RuleGroup
     * @param id the id for the RuleGroup.
     */
    public rulegroupIdGet (id: number, extraHttpRequestParams?: any ) : Observable<models.RuleGroup> {
        const path = this.basePath + '/rulegroup/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rulegroupIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get all the defined RuleSet.
     * The API offer the ability to get the RuleSet and check the detail of it.
     */
    public rulesetGet (extraHttpRequestParams?: any ) : Observable<Array<models.RuleSet>> {
        const path = this.basePath + '/ruleset';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a RuleSet
     * a detailed RuleSet
     * @param id the id for the RuleSet.
     */
    public rulesetIdGet (id: number, extraHttpRequestParams?: any ) : Observable<models.RuleSet> {
        const path = this.basePath + '/ruleset/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rulesetIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get all the defined ThresholdDef.
     * The API offer the ability to get the ThresholdDef and check the detail of it.
     */
    public thresholdDefGet (extraHttpRequestParams?: any ) : Observable<Array<models.ThresholdDef>> {
        const path = this.basePath + '/threshold_def';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a ThresholdDef
     * a detailed ThresholdDef
     * @param id the id for the ThresholdDef.
     */
    public thresholdDefIdGet (id: number, extraHttpRequestParams?: any ) : Observable<models.ThresholdDef> {
        const path = this.basePath + '/threshold_def/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling thresholdDefIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get all the defined Threshold.
     * The API offer the ability to get the Threshold and check the detail of it.
     */
    public thresholdGet (extraHttpRequestParams?: any ) : Observable<Array<models.Threshold>> {
        const path = this.basePath + '/threshold';

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a Threshold
     * a detailed Threshold
     * @param id the id for the Threshold.
     */
    public thresholdIdGet (id: number, extraHttpRequestParams?: any ) : Observable<models.Threshold> {
        const path = this.basePath + '/threshold/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling thresholdIdGet.');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

  /**
   * Get the order of Order Config.
   * The API offer the ability to get the RuleGroup and check the detail of it.
   */
  public orderGet (extraHttpRequestParams?: any ) : Observable<Array<models.RuleGroup>> {
    const path = this.basePath + '/display_order';

    let queryParameters = new URLSearchParams();
    let headerParams = this.headerParser(this.defaultHeaders);
    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }


}
