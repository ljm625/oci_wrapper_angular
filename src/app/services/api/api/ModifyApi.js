/**
 * OCI Wrapper API
 * Make it possible to query, modify and delete rules and rulegroups
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var http_1 = require('@angular/http');
var core_1 = require('@angular/core');
require('rxjs/Rx');
var globals = require('../../../config.global');
/* tslint:disable:no-unused-variable member-ordering */
'use strict';
var cookies_service_1 = require("angular2-cookie/services/cookies.service");
var ModifyApi = (function () {
    function ModifyApi(http, basePath, cookie) {
        this.http = http;
        this.cookie = cookie;
        this.basePath = globals.OCI_URL + '/api/v1';
        this.defaultHeaders = new http_1.Headers({
            'Content-Type': 'application/json',
            Accept: 'application/json'
        });
        if (basePath) {
            this.basePath = basePath;
        }
    }
    ModifyApi.prototype.headerParser = function (header) {
        if (header.get('Authorization') != undefined) {
            header.set('Authorization', "Basic " + this.cookie.get('oci_session'));
            return header;
        }
        else {
            header.append('Authorization', "Basic " + this.cookie.get('oci_session'));
            return header;
        }
    };
    /**
     * modify a DataSources.
     * The API offer the ability to mod the datasource
     * @param id the id for the datasource.
     * @param body the datasource.
     */
    ModifyApi.prototype.datasourceIdPost = function (id, body, extraHttpRequestParams) {
        var path = this.basePath + '/datasource/{id}'
            .replace('{' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling datasourceIdPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling datasourceIdPost.');
        }
        var requestOptions = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * modify a RuleGroup.
     * The API offer the ability to mod the RuleGroup
     * @param id the id for the RuleGroup.
     * @param body the RuleGroup.
     */
    ModifyApi.prototype.rulegroupIdPost = function (id, body, extraHttpRequestParams) {
        var path = this.basePath + '/rulegroup/{id}'
            .replace('{' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rulegroupIdPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling rulegroupIdPost.');
        }
        var requestOptions = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * modify a RuleSet.
     * The API offer the ability to mod the RuleSet
     * @param id the id for the RuleSet.
     * @param body the RuleSet.
     */
    ModifyApi.prototype.rulesetIdPost = function (id, body, extraHttpRequestParams) {
        var path = this.basePath + '/ruleset/{id}'
            .replace('{' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rulesetIdPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling rulesetIdPost.');
        }
        var requestOptions = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * modify a ThresholdDef.
     * The API offer the ability to mod the ThresholdDef
     * @param id the id for the ThresholdDef.
     * @param body the ThresholdDef.
     */
    ModifyApi.prototype.thresholdDefIdPost = function (id, body, extraHttpRequestParams) {
        var path = this.basePath + '/threshold_def/{id}'
            .replace('{' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling thresholdDefIdPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling thresholdDefIdPost.');
        }
        var requestOptions = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * modify a Threshold.
     * The API offer the ability to mod the Threshold
     * @param id the id for the Threshold.
     * @param body the Threshold.
     */
    ModifyApi.prototype.thresholdIdPost = function (id, body, extraHttpRequestParams) {
        var path = this.basePath + '/threshold/{id}'
            .replace('{' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headerParams = this.headerParser(this.defaultHeaders);
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling thresholdIdPost.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling thresholdIdPost.');
        }
        var requestOptions = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(body);
        return this.http.request(path, requestOptions)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    ModifyApi = __decorate([
        core_1.Injectable(),
        __param(1, core_1.Optional()), 
        __metadata('design:paramtypes', [http_1.Http, String, cookies_service_1.CookieService])
    ], ModifyApi);
    return ModifyApi;
}());
exports.ModifyApi = ModifyApi;
//# sourceMappingURL=ModifyApi.js.map